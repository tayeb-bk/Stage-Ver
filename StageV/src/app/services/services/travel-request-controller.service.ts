/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTravelRequest$Json } from '../fn/travel-request-controller/create-travel-request-json';
import { CreateTravelRequest$Json$Params } from '../fn/travel-request-controller/create-travel-request-json';
import { createTravelRequest$JsonCharsetUtf8 } from '../fn/travel-request-controller/create-travel-request-json-charset-utf-8';
import { CreateTravelRequest$JsonCharsetUtf8$Params } from '../fn/travel-request-controller/create-travel-request-json-charset-utf-8';
import { deleteTravelRequest } from '../fn/travel-request-controller/delete-travel-request';
import { DeleteTravelRequest$Params } from '../fn/travel-request-controller/delete-travel-request';
import { getAllTravelRequests } from '../fn/travel-request-controller/get-all-travel-requests';
import { GetAllTravelRequests$Params } from '../fn/travel-request-controller/get-all-travel-requests';
import { getTravelRequest } from '../fn/travel-request-controller/get-travel-request';
import { GetTravelRequest$Params } from '../fn/travel-request-controller/get-travel-request';
import { TravelRequest } from '../models/travel-request';
import { updateTravelRequest } from '../fn/travel-request-controller/update-travel-request';
import { UpdateTravelRequest$Params } from '../fn/travel-request-controller/update-travel-request';

@Injectable({ providedIn: 'root' })
export class TravelRequestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTravelRequest()` */
  static readonly UpdateTravelRequestPath = '/api/travel-requests/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTravelRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTravelRequest$Response(params: UpdateTravelRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return updateTravelRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTravelRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTravelRequest(params: UpdateTravelRequest$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.updateTravelRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `createTravelRequest()` */
  static readonly CreateTravelRequestPath = '/api/travel-requests/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTravelRequest$JsonCharsetUtf8()` instead.
   *
   * This method sends `application/json;charset=UTF-8` and handles request body of type `application/json;charset=UTF-8`.
   */
  createTravelRequest$JsonCharsetUtf8$Response(params: CreateTravelRequest$JsonCharsetUtf8$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return createTravelRequest$JsonCharsetUtf8(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTravelRequest$JsonCharsetUtf8$Response()` instead.
   *
   * This method sends `application/json;charset=UTF-8` and handles request body of type `application/json;charset=UTF-8`.
   */
  createTravelRequest$JsonCharsetUtf8(params: CreateTravelRequest$JsonCharsetUtf8$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.createTravelRequest$JsonCharsetUtf8$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTravelRequest$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTravelRequest$Json$Response(params: CreateTravelRequest$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return createTravelRequest$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTravelRequest$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTravelRequest$Json(params: CreateTravelRequest$Json$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.createTravelRequest$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `getTravelRequest()` */
  static readonly GetTravelRequestPath = '/api/travel-requests/get/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTravelRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTravelRequest$Response(params: GetTravelRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return getTravelRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTravelRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTravelRequest(params: GetTravelRequest$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.getTravelRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `getAllTravelRequests()` */
  static readonly GetAllTravelRequestsPath = '/api/travel-requests/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTravelRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTravelRequests$Response(params?: GetAllTravelRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TravelRequest>>> {
    return getAllTravelRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTravelRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTravelRequests(params?: GetAllTravelRequests$Params, context?: HttpContext): Observable<Array<TravelRequest>> {
    return this.getAllTravelRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TravelRequest>>): Array<TravelRequest> => r.body)
    );
  }

  /** Path part for operation `deleteTravelRequest()` */
  static readonly DeleteTravelRequestPath = '/api/travel-requests/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTravelRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTravelRequest$Response(params: DeleteTravelRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTravelRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTravelRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTravelRequest(params: DeleteTravelRequest$Params, context?: HttpContext): Observable<void> {
    return this.deleteTravelRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
