/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteInvoice } from '../fn/invoice-controller/delete-invoice';
import { DeleteInvoice$Params } from '../fn/invoice-controller/delete-invoice';
import { downloadInvoicePdf } from '../fn/invoice-controller/download-invoice-pdf';
import { DownloadInvoicePdf$Params } from '../fn/invoice-controller/download-invoice-pdf';
import { generateAndDownloadInvoice } from '../fn/invoice-controller/generate-and-download-invoice';
import { GenerateAndDownloadInvoice$Params } from '../fn/invoice-controller/generate-and-download-invoice';
import { generateInvoice } from '../fn/invoice-controller/generate-invoice';
import { GenerateInvoice$Params } from '../fn/invoice-controller/generate-invoice';
import { getAllInvoices } from '../fn/invoice-controller/get-all-invoices';
import { GetAllInvoices$Params } from '../fn/invoice-controller/get-all-invoices';
import { getInvoiceByTravel } from '../fn/invoice-controller/get-invoice-by-travel';
import { GetInvoiceByTravel$Params } from '../fn/invoice-controller/get-invoice-by-travel';
import { Invoice } from '../models/invoice';

@Injectable({ providedIn: 'root' })
export class InvoiceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `generateInvoice()` */
  static readonly GenerateInvoicePath = '/api/invoices/generate/{travelRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `generateInvoice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateInvoice$Response(params: GenerateInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<Invoice>> {
    return generateInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `generateInvoice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateInvoice(params: GenerateInvoice$Params, context?: HttpContext): Observable<Invoice> {
    return this.generateInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<Invoice>): Invoice => r.body)
    );
  }

  /** Path part for operation `generateAndDownloadInvoice()` */
  static readonly GenerateAndDownloadInvoicePath = '/api/invoices/generate-and-download/{travelRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `generateAndDownloadInvoice()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateAndDownloadInvoice$Response(params: GenerateAndDownloadInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return generateAndDownloadInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `generateAndDownloadInvoice$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateAndDownloadInvoice(params: GenerateAndDownloadInvoice$Params, context?: HttpContext): Observable<Array<string>> {
    return this.generateAndDownloadInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllInvoices()` */
  static readonly GetAllInvoicesPath = '/api/invoices';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllInvoices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInvoices$Response(params?: GetAllInvoices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Invoice>>> {
    return getAllInvoices(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllInvoices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllInvoices(params?: GetAllInvoices$Params, context?: HttpContext): Observable<Array<Invoice>> {
    return this.getAllInvoices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Invoice>>): Array<Invoice> => r.body)
    );
  }

  /** Path part for operation `getInvoiceByTravel()` */
  static readonly GetInvoiceByTravelPath = '/api/invoices/travel/{travelRequestId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInvoiceByTravel()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByTravel$Response(params: GetInvoiceByTravel$Params, context?: HttpContext): Observable<StrictHttpResponse<Invoice>> {
    return getInvoiceByTravel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInvoiceByTravel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInvoiceByTravel(params: GetInvoiceByTravel$Params, context?: HttpContext): Observable<Invoice> {
    return this.getInvoiceByTravel$Response(params, context).pipe(
      map((r: StrictHttpResponse<Invoice>): Invoice => r.body)
    );
  }

  /** Path part for operation `downloadInvoicePdf()` */
  static readonly DownloadInvoicePdfPath = '/api/invoices/download-pdf/{invoiceId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadInvoicePdf()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadInvoicePdf$Response(params: DownloadInvoicePdf$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return downloadInvoicePdf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadInvoicePdf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadInvoicePdf(params: DownloadInvoicePdf$Params, context?: HttpContext): Observable<Array<string>> {
    return this.downloadInvoicePdf$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `deleteInvoice()` */
  static readonly DeleteInvoicePath = '/api/invoices/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteInvoice()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteInvoice$Response(params: DeleteInvoice$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteInvoice(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteInvoice$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteInvoice(params: DeleteInvoice$Params, context?: HttpContext): Observable<void> {
    return this.deleteInvoice$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
