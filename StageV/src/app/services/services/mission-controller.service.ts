/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMission } from '../fn/mission-controller/create-mission';
import { CreateMission$Params } from '../fn/mission-controller/create-mission';
import { deleteMission } from '../fn/mission-controller/delete-mission';
import { DeleteMission$Params } from '../fn/mission-controller/delete-mission';
import { getAllMissions } from '../fn/mission-controller/get-all-missions';
import { GetAllMissions$Params } from '../fn/mission-controller/get-all-missions';
import { getMission } from '../fn/mission-controller/get-mission';
import { GetMission$Params } from '../fn/mission-controller/get-mission';
import { Mission } from '../models/mission';
import { updateMission } from '../fn/mission-controller/update-mission';
import { UpdateMission$Params } from '../fn/mission-controller/update-mission';

@Injectable({ providedIn: 'root' })
export class MissionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMission()` */
  static readonly UpdateMissionPath = '/api/missions/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMission$Response(params: UpdateMission$Params, context?: HttpContext): Observable<StrictHttpResponse<Mission>> {
    return updateMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMission(params: UpdateMission$Params, context?: HttpContext): Observable<Mission> {
    return this.updateMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<Mission>): Mission => r.body)
    );
  }

  /** Path part for operation `createMission()` */
  static readonly CreateMissionPath = '/api/missions/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMission$Response(params: CreateMission$Params, context?: HttpContext): Observable<StrictHttpResponse<Mission>> {
    return createMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMission(params: CreateMission$Params, context?: HttpContext): Observable<Mission> {
    return this.createMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<Mission>): Mission => r.body)
    );
  }

  /** Path part for operation `getMission()` */
  static readonly GetMissionPath = '/api/missions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMission$Response(params: GetMission$Params, context?: HttpContext): Observable<StrictHttpResponse<Mission>> {
    return getMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMission(params: GetMission$Params, context?: HttpContext): Observable<Mission> {
    return this.getMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<Mission>): Mission => r.body)
    );
  }

  /** Path part for operation `getAllMissions()` */
  static readonly GetAllMissionsPath = '/api/missions/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMissions$Response(params?: GetAllMissions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Mission>>> {
    return getAllMissions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMissions(params?: GetAllMissions$Params, context?: HttpContext): Observable<Array<Mission>> {
    return this.getAllMissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Mission>>): Array<Mission> => r.body)
    );
  }

  /** Path part for operation `deleteMission()` */
  static readonly DeleteMissionPath = '/api/missions/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMission$Response(params: DeleteMission$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMission(params: DeleteMission$Params, context?: HttpContext): Observable<void> {
    return this.deleteMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
