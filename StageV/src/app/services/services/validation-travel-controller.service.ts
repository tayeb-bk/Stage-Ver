/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteValidationTravelRequest } from '../fn/validation-travel-controller/delete-validation-travel-request';
import { DeleteValidationTravelRequest$Params } from '../fn/validation-travel-controller/delete-validation-travel-request';
import { getByStatus1 } from '../fn/validation-travel-controller/get-by-status-1';
import { GetByStatus1$Params } from '../fn/validation-travel-controller/get-by-status-1';
import { TravelRequest } from '../models/travel-request';
import { updateStatus1 } from '../fn/validation-travel-controller/update-status-1';
import { UpdateStatus1$Params } from '../fn/validation-travel-controller/update-status-1';
import { validateStep11 } from '../fn/validation-travel-controller/validate-step-11';
import { ValidateStep11$Params } from '../fn/validation-travel-controller/validate-step-11';
import { validateStep21 } from '../fn/validation-travel-controller/validate-step-21';
import { ValidateStep21$Params } from '../fn/validation-travel-controller/validate-step-21';

@Injectable({ providedIn: 'root' })
export class ValidationTravelControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateStatus1()` */
  static readonly UpdateStatus1Path = '/api/validation-travels/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStatus1()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus1$Response(params: UpdateStatus1$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return updateStatus1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStatus1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus1(params: UpdateStatus1$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.updateStatus1$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `validateStep21()` */
  static readonly ValidateStep21Path = '/api/validation-travels/step2/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateStep21()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep21$Response(params: ValidateStep21$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return validateStep21(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateStep21$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep21(params: ValidateStep21$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.validateStep21$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `validateStep11()` */
  static readonly ValidateStep11Path = '/api/validation-travels/step1/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateStep11()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep11$Response(params: ValidateStep11$Params, context?: HttpContext): Observable<StrictHttpResponse<TravelRequest>> {
    return validateStep11(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateStep11$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep11(params: ValidateStep11$Params, context?: HttpContext): Observable<TravelRequest> {
    return this.validateStep11$Response(params, context).pipe(
      map((r: StrictHttpResponse<TravelRequest>): TravelRequest => r.body)
    );
  }

  /** Path part for operation `getByStatus1()` */
  static readonly GetByStatus1Path = '/api/validation-travels/status/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByStatus1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus1$Response(params: GetByStatus1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TravelRequest>>> {
    return getByStatus1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByStatus1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus1(params: GetByStatus1$Params, context?: HttpContext): Observable<Array<TravelRequest>> {
    return this.getByStatus1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TravelRequest>>): Array<TravelRequest> => r.body)
    );
  }

  /** Path part for operation `deleteValidationTravelRequest()` */
  static readonly DeleteValidationTravelRequestPath = '/api/validation-travels/validation/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteValidationTravelRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteValidationTravelRequest$Response(params: DeleteValidationTravelRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteValidationTravelRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteValidationTravelRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteValidationTravelRequest(params: DeleteValidationTravelRequest$Params, context?: HttpContext): Observable<void> {
    return this.deleteValidationTravelRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
