/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteVisaRequest1 } from '../fn/validation-visa-controller/delete-visa-request-1';
import { DeleteVisaRequest1$Params } from '../fn/validation-visa-controller/delete-visa-request-1';
import { getByStatus } from '../fn/validation-visa-controller/get-by-status';
import { GetByStatus$Params } from '../fn/validation-visa-controller/get-by-status';
import { updateStatus } from '../fn/validation-visa-controller/update-status';
import { UpdateStatus$Params } from '../fn/validation-visa-controller/update-status';
import { validateStep1 } from '../fn/validation-visa-controller/validate-step-1';
import { ValidateStep1$Params } from '../fn/validation-visa-controller/validate-step-1';
import { validateStep2 } from '../fn/validation-visa-controller/validate-step-2';
import { ValidateStep2$Params } from '../fn/validation-visa-controller/validate-step-2';
import { VisaRequest } from '../models/visa-request';

@Injectable({ providedIn: 'root' })
export class ValidationVisaControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateStatus()` */
  static readonly UpdateStatusPath = '/api/validation-visas/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus$Response(params: UpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return updateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus(params: UpdateStatus$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.updateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `validateStep2()` */
  static readonly ValidateStep2Path = '/api/validation-visas/step2/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateStep2()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep2$Response(params: ValidateStep2$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return validateStep2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateStep2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep2(params: ValidateStep2$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.validateStep2$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `validateStep1()` */
  static readonly ValidateStep1Path = '/api/validation-visas/step1/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateStep1()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep1$Response(params: ValidateStep1$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return validateStep1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateStep1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateStep1(params: ValidateStep1$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.validateStep1$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `getByStatus()` */
  static readonly GetByStatusPath = '/api/validation-visas/status/{status}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus$Response(params: GetByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<VisaRequest>>> {
    return getByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByStatus(params: GetByStatus$Params, context?: HttpContext): Observable<Array<VisaRequest>> {
    return this.getByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<VisaRequest>>): Array<VisaRequest> => r.body)
    );
  }

  /** Path part for operation `deleteVisaRequest1()` */
  static readonly DeleteVisaRequest1Path = '/api/validation-visas/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteVisaRequest1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVisaRequest1$Response(params: DeleteVisaRequest1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteVisaRequest1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteVisaRequest1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVisaRequest1(params: DeleteVisaRequest1$Params, context?: HttpContext): Observable<void> {
    return this.deleteVisaRequest1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
