/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createVisaRequest } from '../fn/visa-request-controller/create-visa-request';
import { CreateVisaRequest$Params } from '../fn/visa-request-controller/create-visa-request';
import { deleteVisaRequest } from '../fn/visa-request-controller/delete-visa-request';
import { DeleteVisaRequest$Params } from '../fn/visa-request-controller/delete-visa-request';
import { getAllVisaRequests } from '../fn/visa-request-controller/get-all-visa-requests';
import { GetAllVisaRequests$Params } from '../fn/visa-request-controller/get-all-visa-requests';
import { getVisaRequestById } from '../fn/visa-request-controller/get-visa-request-by-id';
import { GetVisaRequestById$Params } from '../fn/visa-request-controller/get-visa-request-by-id';
import { updateVisaRequest } from '../fn/visa-request-controller/update-visa-request';
import { UpdateVisaRequest$Params } from '../fn/visa-request-controller/update-visa-request';
import { VisaRequest } from '../models/visa-request';

@Injectable({ providedIn: 'root' })
export class VisaRequestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateVisaRequest()` */
  static readonly UpdateVisaRequestPath = '/api/visa-requests/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateVisaRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVisaRequest$Response(params: UpdateVisaRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return updateVisaRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateVisaRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVisaRequest(params: UpdateVisaRequest$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.updateVisaRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `createVisaRequest()` */
  static readonly CreateVisaRequestPath = '/api/visa-requests/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createVisaRequest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVisaRequest$Response(params: CreateVisaRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return createVisaRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createVisaRequest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVisaRequest(params: CreateVisaRequest$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.createVisaRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `getVisaRequestById()` */
  static readonly GetVisaRequestByIdPath = '/api/visa-requests/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVisaRequestById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVisaRequestById$Response(params: GetVisaRequestById$Params, context?: HttpContext): Observable<StrictHttpResponse<VisaRequest>> {
    return getVisaRequestById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVisaRequestById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVisaRequestById(params: GetVisaRequestById$Params, context?: HttpContext): Observable<VisaRequest> {
    return this.getVisaRequestById$Response(params, context).pipe(
      map((r: StrictHttpResponse<VisaRequest>): VisaRequest => r.body)
    );
  }

  /** Path part for operation `getAllVisaRequests()` */
  static readonly GetAllVisaRequestsPath = '/api/visa-requests/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllVisaRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVisaRequests$Response(params?: GetAllVisaRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<VisaRequest>>> {
    return getAllVisaRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllVisaRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVisaRequests(params?: GetAllVisaRequests$Params, context?: HttpContext): Observable<Array<VisaRequest>> {
    return this.getAllVisaRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<VisaRequest>>): Array<VisaRequest> => r.body)
    );
  }

  /** Path part for operation `deleteVisaRequest()` */
  static readonly DeleteVisaRequestPath = '/api/visa-requests/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteVisaRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVisaRequest$Response(params: DeleteVisaRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteVisaRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteVisaRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVisaRequest(params: DeleteVisaRequest$Params, context?: HttpContext): Observable<void> {
    return this.deleteVisaRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
